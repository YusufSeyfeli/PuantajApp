// <auto-generated />
using System;
using DataAccess.Context.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(SimpleContextDb))]
    [Migration("20240511142915_newDatabase")]
    partial class newDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Competency", b =>
                {
                    b.Property<Guid>("CompetencyGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompetencyGuidId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("Entities.Concrete.EmailParameter", b =>
                {
                    b.Property<Guid>("EmailParameterGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Html")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<bool>("SSL")
                        .HasColumnType("bit");

                    b.Property<string>("Smtp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailParameterGuidId");

                    b.ToTable("EmailParameters");
                });

            modelBuilder.Entity("Entities.Concrete.Holiday", b =>
                {
                    b.Property<Guid>("HolidayGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HolidayFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("HolidayFirstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HolidayGuidId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Entities.Concrete.JobDepartment", b =>
                {
                    b.Property<Guid>("JobDepartmentGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobDepartmentGuidId");

                    b.ToTable("JobDepartments");
                });

            modelBuilder.Entity("Entities.Concrete.JobUnit", b =>
                {
                    b.Property<Guid>("JobUnitGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobDepartmentGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobUnitName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobUnitGuidId");

                    b.HasIndex("JobDepartmentGuidId");

                    b.ToTable("JobUnits");
                });

            modelBuilder.Entity("Entities.Concrete.Logging", b =>
                {
                    b.Property<Guid>("LoggingGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogDebug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoggingGuidId");

                    b.ToTable("Loggings");
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<Guid>("OperationClaimGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationClaimName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OperationClaimGuidId");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.OperationCompetency", b =>
                {
                    b.Property<Guid>("OperationCompetencyGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetencyGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationClaimGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperationCompetencyGuidId");

                    b.HasIndex("CompetencyGuidId");

                    b.HasIndex("OperationClaimGuidId");

                    b.ToTable("OperationCompetencies");
                });

            modelBuilder.Entity("Entities.Concrete.Settings", b =>
                {
                    b.Property<Guid>("SettingsGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayHour")
                        .HasColumnType("int");

                    b.Property<int>("MontHour")
                        .HasColumnType("int");

                    b.Property<int>("WeekHour")
                        .HasColumnType("int");

                    b.HasKey("SettingsGuidId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.Property<Guid>("StudentGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FacultyDepartment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ImageByte")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("JobUnitGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentClass")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentGuidId");

                    b.HasIndex("JobUnitGuidId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Entities.Concrete.Syllabus", b =>
                {
                    b.Property<Guid>("SyllabusGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DayTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SyllabusGuidId");

                    b.HasIndex("StudentGuidId");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("Entities.Concrete.Tally", b =>
                {
                    b.Property<Guid>("TallyGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountHour")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("StudentGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TallyGuidId");

                    b.HasIndex("StudentGuidId");

                    b.ToTable("Tallies");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("UserGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ForgotPasswordRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ForgotPasswordValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ImageByte")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForgotPasswordComplete")
                        .HasColumnType("bit");

                    b.Property<string>("NameSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserGuidId");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Entities.Concrete.UserJobUnit", b =>
                {
                    b.Property<Guid>("UserJobUnitGuidId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobUnitGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserJobUnitGuidId");

                    b.HasIndex("JobUnitGuidId");

                    b.HasIndex("UserGuidId");

                    b.ToTable("UserJobUnits");
                });

            modelBuilder.Entity("Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<Guid>("UserOperationClaimGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationClaimGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserOperationClaimGuidId");

                    b.HasIndex("OperationClaimGuidId");

                    b.HasIndex("UserGuidId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.WeekTally", b =>
                {
                    b.Property<Guid>("WeekTallyGuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountHour")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("StudentGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeekDate")
                        .HasColumnType("int");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("WeekTallyGuidId");

                    b.HasIndex("StudentGuidId");

                    b.ToTable("WeekTallies");
                });

            modelBuilder.Entity("Entities.Concrete.JobUnit", b =>
                {
                    b.HasOne("Entities.Concrete.JobDepartment", "JobDepartment")
                        .WithMany("JobUnits")
                        .HasForeignKey("JobDepartmentGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobDepartment");
                });

            modelBuilder.Entity("Entities.Concrete.OperationCompetency", b =>
                {
                    b.HasOne("Entities.Concrete.Competency", "Competency")
                        .WithMany("OperationCompetencies")
                        .HasForeignKey("CompetencyGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("OperationCompetencies")
                        .HasForeignKey("OperationClaimGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.HasOne("Entities.Concrete.JobUnit", "JobUnit")
                        .WithMany("Students")
                        .HasForeignKey("JobUnitGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobUnit");
                });

            modelBuilder.Entity("Entities.Concrete.Syllabus", b =>
                {
                    b.HasOne("Entities.Concrete.Student", "Student")
                        .WithMany("Syllabi")
                        .HasForeignKey("StudentGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Concrete.Tally", b =>
                {
                    b.HasOne("Entities.Concrete.Student", "Student")
                        .WithMany("Tallies")
                        .HasForeignKey("StudentGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Concrete.UserJobUnit", b =>
                {
                    b.HasOne("Entities.Concrete.JobUnit", "JobUnit")
                        .WithMany("UserJobUnits")
                        .HasForeignKey("JobUnitGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("UserJobUnits")
                        .HasForeignKey("UserGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.WeekTally", b =>
                {
                    b.HasOne("Entities.Concrete.Student", "Student")
                        .WithMany("WeekTallies")
                        .HasForeignKey("StudentGuidId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Concrete.Competency", b =>
                {
                    b.Navigation("OperationCompetencies");
                });

            modelBuilder.Entity("Entities.Concrete.JobDepartment", b =>
                {
                    b.Navigation("JobUnits");
                });

            modelBuilder.Entity("Entities.Concrete.JobUnit", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("UserJobUnits");
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("OperationCompetencies");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.Navigation("Syllabi");

                    b.Navigation("Tallies");

                    b.Navigation("WeekTallies");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("UserJobUnits");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
